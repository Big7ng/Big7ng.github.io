<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Big7ng&#39;s Blog</title>
  
  
  <link href="https://big7ng.github.io/atom.xml" rel="self"/>
  
  <link href="https://big7ng.github.io/"/>
  <updated>2023-11-05T14:54:08.468Z</updated>
  <id>https://big7ng.github.io/</id>
  
  <author>
    <name>Big7ng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debian系统中实现局域网共享文件夹（samba）</title>
    <link href="https://big7ng.github.io/2023/11/05/samba/"/>
    <id>https://big7ng.github.io/2023/11/05/samba/</id>
    <published>2023-11-05T14:26:01.522Z</published>
    <updated>2023-11-05T14:54:08.468Z</updated>
    
    <content type="html"><![CDATA[<p>本文将在Debian12 bookworm系统中，通过samba服务实现网络共享文件夹，并实现外置硬盘的自动挂载。</p><h1 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h1><h4 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><p>查看samba安装状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status smbd</span><br></pre></td></tr></table></figure><p>smbd处于running状态,则安装成功</p><h4 id="配置samba"><a href="#配置samba" class="headerlink" title="配置samba"></a>配置samba</h4><p>进入samba配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>在文件末尾添加如下内容,<code>path</code>为需要共享的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[sambashare]</span><br><span class="line">    comment = Samba on debian</span><br><span class="line">    path = /mnt/study</span><br><span class="line">    read only = no</span><br><span class="line">    browsable = yes</span><br><span class="line">    guest ok = yes</span><br></pre></td></tr></table></figure><p>配置samba登录用户名与密码,用户名需与系统用户名相同</p><p>如果在配置文件中声明<code>guest ok = yes</code>,则这一步可以跳过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a username</span><br></pre></td></tr></table></figure><p>重启samba服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smbd.service</span><br></pre></td></tr></table></figure><h1 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h1><p>将外置硬盘插入主机中,我们可以使用<code>mount</code>命令来挂载,如果系统重启,我们需要重新mount,接下来将配置自动挂载.</p><p>首先将硬盘插入主机,使用<code>sudo fdisk -l</code>查看块设备.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/sda: 931.51 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Disk model: RTL9210 NVME</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 33553920 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 64950C9B-606E-4BBA-93D1-C032DA79C574</span><br><span class="line"></span><br><span class="line">Device     Start        End    Sectors   Size Type</span><br><span class="line">/dev/sda1     34      32767      32734    16M Microsoft reserved</span><br><span class="line">/dev/sda2  32768 1953523711 1953490944 931.5G Microsoft basic data</span><br></pre></td></tr></table></figure><p>使用mount命令挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda2 /mnt/study</span><br></pre></td></tr></table></figure><p>挂载后,使用<code>lsblk -f</code>查看设备信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">user@starfive:~$ lsblk -f</span><br><span class="line">NAME        FSTYPE FSVER LABEL UUID                                 FSAVAIL FSUSE% MOUNTPOINTS</span><br><span class="line">sda</span><br><span class="line">|-sda1</span><br><span class="line">`-sda2      ntfs               2921CF502C42771A                        726G    22% /mnt/study</span><br><span class="line">mtdblock0</span><br><span class="line">mtdblock1</span><br><span class="line">mtdblock2</span><br><span class="line">mmcblk1</span><br><span class="line">|-mmcblk1p1</span><br><span class="line">|-mmcblk1p2</span><br><span class="line">|-mmcblk1p3 vfat   FAT16       DC47-E0F8</span><br><span class="line">`-mmcblk1p4 ext4   1.0   root  93d1b271-9260-4414-99ba-55edab9106e7  109.1G     8% /</span><br><span class="line">nvme0n1     ext4   1.0         9decbacf-f688-4442-a107-140863a2c42f</span><br></pre></td></tr></table></figure><p>记下需要自动挂载的设备的UUID与FSTYPE,修改<code>/etc/fstab</code>文件,添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=2921CF502C42771A   /mnt/study      ntfs    default 0       0</span><br></pre></td></tr></table></figure><p>保存后,下次重新启动即可实现自动挂载.</p><p>自此,samba服务就算是配置完成了,在windows系统的文件资源管理器中输入地址<code>\\&#123;配置samba服务的主机网络地址&#125;</code>即可访问共享文件夹.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将在Debian12 bookworm系统中，通过samba服务实现网络共享文件夹，并实现外置硬盘的自动挂载。&lt;/p&gt;
&lt;h1 id=&quot;Samba&quot;&gt;&lt;a href=&quot;#Samba&quot; class=&quot;headerlink&quot; title=&quot;Samba&quot;&gt;&lt;/a&gt;Samba&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://big7ng.github.io/2023/09/24/unfinished/visionfive2/"/>
    <id>https://big7ng.github.io/2023/09/24/unfinished/visionfive2/</id>
    <published>2023-09-24T14:07:22.654Z</published>
    <updated>2023-09-24T16:13:30.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>安装所需工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y build-essential gcc-riscv64-linux-gnu libncurses-dev</span><br></pre></td></tr></table></figure><p>下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/starfive-tech/linux.git</span><br><span class="line"><span class="comment"># 执行以下命令，切换到代码分支：</span></span><br><span class="line"><span class="built_in">cd</span> linux</span><br><span class="line">git checkout -b JH7110_VisionFive2_devel origin/JH7110_VisionFive2_devel</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>设置编译Linux内核的默认设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make starfive_visionfive2_defconfig CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv</span><br></pre></td></tr></table></figure><p>设置编译Linux内核其他软件设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv menuconfig</span><br></pre></td></tr></table></figure><p>编译内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j4</span><br></pre></td></tr></table></figure><p>生成vmlinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=~/repos/compiled/ zinstall -j4</span><br></pre></td></tr></table></figure><h2 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h2><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /boot/dtbs/new</span><br><span class="line">sudo <span class="built_in">mkdir</span> /boot/dtbs/new/starfive</span><br><span class="line">sudo <span class="built_in">cp</span> <span class="built_in">arch</span>/riscv/boot/dts/starfive/jh7110-visionfive-v2*.dtb /boot/dtbs/new/starfive/</span><br><span class="line">sudo <span class="built_in">cp</span> -r <span class="built_in">arch</span>/riscv/boot/dts/starfive/vf2-overlay /boot/dtbs/new/starfive/</span><br><span class="line">sudo <span class="built_in">cp</span> ~/repos/compiled/vmlinuz-5.15.0_new /boot/boot/vmlinuz-5.15.0_for_HonestQiao</span><br></pre></td></tr></table></figure><p>更新&#x2F;boot&#x2F;extlinux&#x2F;extlinux.conf文件</p><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make install </span><br><span class="line">sudo make modules_install</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编译内核&quot;&gt;&lt;a href=&quot;#编译内核&quot; class=&quot;headerlink&quot; title=&quot;编译内核&quot;&gt;&lt;/a&gt;编译内核&lt;/h2&gt;&lt;p&gt;安装所需工具&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为使用国产SF19A2890芯片的gl-sft1200路由器编译第三方固件</title>
    <link href="https://big7ng.github.io/2023/09/11/glinet/"/>
    <id>https://big7ng.github.io/2023/09/11/glinet/</id>
    <published>2023-09-11T04:14:10.541Z</published>
    <updated>2023-09-11T12:46:59.166Z</updated>
    
    <content type="html"><![CDATA[<p>因为要在寝室里使用，选来选去最终购买了sft1200这款路由器，看重了它的小巧不占空间以及开放源码。<br><img src="\img\sft1200.jpg" alt="sft1200" style="zoom:50%;" /></p><p>本次编译使用vmware虚拟机，操作系统为ubuntu20.04。</p><h1 id="编译固件"><a href="#编译固件" class="headerlink" title="编译固件"></a>编译固件</h1><p>首先下载第三方固件源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Big7ng/openwrt-sf-sft1200.git</span><br></pre></td></tr></table></figure><p>进入openwrt目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openwrt-18.06</span><br></pre></td></tr></table></figure><p>更新feeds</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/feeds update -a&amp;&amp; ./scripts/feeds install -a</span><br></pre></td></tr></table></figure><p>根据所使用的路由器型号选择配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> .config.sf1200 .config  <span class="comment">#如果使用sf路由器则 cp .config.sf1200 .config</span></span><br></pre></td></tr></table></figure><p>配置所需要的luci-app以及luci-theme</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>依次点击LuCI-&gt;Applications\Themes,然后选择需要编译安装的应用,我这里选择安装了Openclash以及argon主题。</p><img src="\img\vmware_sBGwsBqf1i.png" alt="vmware_sBGwsBqf1i" style="zoom:50%;" /><img src="\img\vmware_xfmucOtP3D.png" alt="vmware_xfmucOtP3D" style="zoom: 67%;" /><p>下载编译所需工具，<code>n</code>为使用处理器数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make -jn download</span><br><span class="line">make V=s -jn</span><br></pre></td></tr></table></figure><p>使用官方SDK时，下载时会出现xxd工具<a href="https://github.com/openwrt/openwrt/issues/10555">无法下载的问题</a>，具体的原因为源码配置的连接类型为http，而该网站之后拒绝了http请求，导致无法下载，我们只需要将原url中的http改为https即可。</p><p>编译完成后，打开<code>./bin/targets/siflower</code>文件夹，将<code>immortalwrt-siflower-sf19a28-fullmask-glinet_gl-sft1200-squashfs-factory.img</code>文件保存起来为后续烧录使用。</p><h1 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h1><p>如果现在路由器上使用的是官方固件，那么可以打开管理页面进行Web升级，如果路由器上使用的是第三方固件，那么只能使用uboot刷入，如下所示：</p><p>断开电源，将路由器lan口与电脑连接，按住路由器重置键不放，打开电源，路由器灯闪五下后变成白灯，此时将本机ip改为192.168.1.0网段，然后浏览器输入192.168.1.1进入uboot界面，选择之前编译好的固件。</p><img src="\img\dllhost_UQCpNjowUK.png" alt="dllhost_UQCpNjowUK" style="zoom:50%;" /><img src="\img\chrome_HxQKGEsgQF.png" alt="chrome_HxQKGEsgQF" style="zoom:50%;" /><p>烧入固件成功后，连接名为Openwrt的WIFI，连接成功后进入192.168.1.1管理界面，初始账号为root，密码为passwd。</p><img src="/img/image-20230911201258283.png" alt="image-20230911201258283" style="zoom: 33%;" /><h1 id="使用感悟"><a href="#使用感悟" class="headerlink" title="使用感悟"></a>使用感悟</h1><p>矽昌Siflower的SF19A2890使用了MIPS架构，但对该架构进行了修改，导致无法使用已经编译过的MIPS二进制程序，而需要特定工具链进行编译。Openclash提供的MIPS架构clash内核无法在路由器上使用，需要自行编译，待后续有时间再进行了解，目前就先用一下Passwall吧。</p><p>不过Clash的界面做的真心可以，不管是CFW、clash网页界面还是Openclash，都比其它工具好看，导致我更喜欢用clash。</p><p>参考：</p><ul><li><a href="https://www.right.com.cn/forum/thread-7348817-1-7.html">恩山论坛zheshifandian</a></li><li><a href="https://forum.gl-inet.cn/forum.php?mod=viewthread&tid=3215&extra=page=1">glinet论坛mulder125</a></li></ul><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为要在寝室里使用，选来选去最终购买了sft1200这款路由器，看重了它的小巧不占空间以及开放源码。&lt;br&gt;&lt;img src=&quot;&#92;img&#92;sft1200.jpg&quot; alt=&quot;sft1200&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;本次编译使用vmware虚</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>编译安卓源码并修改开机动画</title>
    <link href="https://big7ng.github.io/2023/07/02/android/"/>
    <id>https://big7ng.github.io/2023/07/02/android/</id>
    <published>2023-07-02T14:13:28.032Z</published>
    <updated>2023-07-02T14:36:41.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文将编译安卓源码，使用自带emulator工具对编译后的系统进行模拟运行，并修改开机动画。</p><h1 id="下载源码并编译安卓"><a href="#下载源码并编译安卓" class="headerlink" title="下载源码并编译安卓"></a>下载源码并编译安卓</h1><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</span><br></pre></td></tr></table></figure><p>安装repo工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/bin</span><br><span class="line"><span class="built_in">export</span> PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line">curl -sSL  <span class="string">&#x27;https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT&#x27;</span> |<span class="built_in">base64</span> -d &gt; ~/bin/repo</span><br><span class="line"><span class="built_in">chmod</span> a+x ~/bin/repo</span><br></pre></td></tr></table></figure><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>使用<code>repo init</code>的方法不稳定，因此从<a href="https://mirrors.ustc.edu.cn/help/aosp.html">中科大镜像源</a>上直接下载aosp镜像tar包，下载完成后进行提取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf aosp_latest.tar</span><br></pre></td></tr></table></figure><p>进入提取后的aosp目录，运行如下命令，进行同步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>初始化环境，每次开启Shell时都需要运行该命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br></pre></td></tr></table></figure><p>通过<code>lunch</code>命令对构建目标进行配置，我这里选择的是<code>sdk_pc_x86_64-userdebug</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lunch sdk_pc_x86_64-userdebug <span class="comment">#也可以只输入lunch命令，再根据提示进行选择</span></span><br></pre></td></tr></table></figure><p>开始构建，可以通过<code>-jN</code>选项设置线程数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m</span><br></pre></td></tr></table></figure><img src="/img/build.png" width="600"><p>本文使用16线程数、16GB内存以及30GB交换空间进行编译，耗时约两个半小时，编译完成后提示：<br><img src="/img/build_finish.png" width="600"></p><h3 id="运行emulator"><a href="#运行emulator" class="headerlink" title="运行emulator"></a>运行emulator</h3><p>编译完成后，使用<code>emulator</code>命令启动模拟器，在启用模拟器前，需要通过<code>lunch</code>进行设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator</span><br></pre></td></tr></table></figure><img src="/img/boot.png" width="600"><h1 id="修改开机动画"><a href="#修改开机动画" class="headerlink" title="修改开机动画"></a>修改开机动画</h1><p>打开<code>packages/services/Car/car_product/bootanimations/bootanimation-832.zip</code>目录，将<code>bootanimation-832.zip</code>修改为自定义的开机动画即可。</p><p>修改完成后，将下述代码加入编译时使用到的任意makefile即可，我这里选用的是<code>build/make/core/envsetup.mk</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">  packages/services/Car/car_product/bootanimations/bootanimation-832.zip:system/media/bootanimation.zip</span><br></pre></td></tr></table></figure><p>重新编译，再运行emulator，即可看到修改后的开机动画。<br><img src="/img/boot2.png" width="600"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将编译安卓源码，使用自带emulator工具对编译后的系统进行模拟运行，并修改开机动画。&lt;/p&gt;
&lt;h1 id=&quot;下载源码并编译安卓&quot;&gt;&lt;a href=&quot;#下载源码并编译安卓&quot; class=&quot;headerlink&quot; title=&quot;下载源码并编译安卓&quot;&gt;&lt;/a&gt;下载源码并</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通过GitHub Pages托管Hexo个人博客</title>
    <link href="https://big7ng.github.io/2023/06/06/hexo_blog/"/>
    <id>https://big7ng.github.io/2023/06/06/hexo_blog/</id>
    <published>2023-06-06T11:03:07.979Z</published>
    <updated>2023-06-06T11:29:22.230Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何通过GitHub Pages托管个人静态页面，博客所使用的框架为<a href="https://hexo.io/zh-cn/index.html">Hexo</a>，Hexo主题为<a href="https://github.com/chongshengsun/hexo-theme-apollo">apollo</a>。</p><h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><h4 id="安装Git、Nodejs"><a href="#安装Git、Nodejs" class="headerlink" title="安装Git、Nodejs"></a>安装Git、Nodejs</h4><h4 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>创建文件夹,初始化Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="安装apollo主题"><a href="#安装apollo主题" class="headerlink" title="安装apollo主题"></a>安装apollo主题</h4><p>安装依赖项(可能会有警告,但可以不管)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>下载主题文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chongshengsun/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>的<code>theme</code>配置项为<code>apollo</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">apollo</span></span><br></pre></td></tr></table></figure><p>apollo主题中的标签栏信息可以在<code>./theme/apollo/_config.yml</code>文件中修改。</p><h2 id="GitHub-Pages配置与部署Hexo"><a href="#GitHub-Pages配置与部署Hexo" class="headerlink" title="GitHub Pages配置与部署Hexo"></a>GitHub Pages配置与部署Hexo</h2><p>一开始打算使用Gitee的页面托管，但是使用该服务需要上传身份证照片，不仅麻烦还不方便写一些特殊技术，遂放弃。如何使用GitHub Pages可以参考<a href="https://docs.github.com/en/pages/quickstart">这篇文章</a>。</p><p>配置好GitHub Pages就可以部署Hexo了.</p><h4 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h4><p>安装 hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Big7ng/Big7ng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>在命令行输入如下命令完成部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将介绍如何通过GitHub Pages托管个人静态页面，博客所使用的框架为&lt;a href=&quot;https://hexo.io/zh-cn/index.html&quot;&gt;Hexo&lt;/a&gt;，Hexo主题为&lt;a href=&quot;https://github.com/chongshengs</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://big7ng.github.io/2023/06/05/hello-world/"/>
    <id>https://big7ng.github.io/2023/06/05/hello-world/</id>
    <published>2023-06-05T14:30:49.978Z</published>
    <updated>2023-06-05T14:30:49.978Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
